import java.text.MessageFormat

plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.minecraft_version + '-' + project.mod_version
group = project.maven_group

minecraft {
}

repositories {
    jcenter()
    maven { url = "http://maven.fabricmc.net/" }
    maven {
        name = "Ladysnake Libs"
        url = 'https://dl.bintray.com/ladysnake/libs'
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"
    }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        url "https://maven.terraformersmc.com/releases/"
        content {
            includeGroup "com.terraformersmc"
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    //DEPENDENCY: Cardinal Components
    modApi "com.github.OnyxStudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components_version}"
    modImplementation "com.github.OnyxStudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_components_version}"
    //modImplementation "com.github.OnyxStudios.Cardinal-Components-API:cardinal-components-level:${project.cardinal_components_version}"

    include "com.github.OnyxStudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components_version}"
    include "com.github.OnyxStudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_components_version}"
    //include "com.github.OnyxStudios.Cardinal-Components-API:cardinal-components-level:${project.cardinal_components_version}"

    //DEPENDENCY: Player Ability Lib
    modImplementation "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"
    include "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"

    //DEPENDENCY: Fall Flying Lib
    modImplementation "com.github.adriantodt:FallFlyingLib:${project.ffl_version}"
    include "com.github.adriantodt:FallFlyingLib:${project.ffl_version}"

    //DEPENDENCY: Cloth Config 2
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude group: "net.fabricmc.fabric-api", module: "fabric-api"
    }
    include ("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude group: "net.fabricmc.fabric-api", module: "fabric-api"
    }

    //COMPATIBILITY: ModMenu
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
        transitive(false)
    }

    // Test environiment with some mods
    modRuntime "me.shedaniel:RoughlyEnoughItems:${project.rei_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

task printInfo {
    doLast {
        System.out << MessageFormat.format(
                '''----- BEGIN -----
### Release Info
This release was built for Minecraft **{0}**, with Fabric Loader **{1}**, Fabric API **{2}** and Fabric Language Kotlin **{3}**.

Mod Menu Integration was tested using version **{4}**.
------ END ------''',
                project.minecraft_version, project.loader_version, project.fabric_version, project.fabric_kotlin_version,
                project.modmenu_version
        )
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"